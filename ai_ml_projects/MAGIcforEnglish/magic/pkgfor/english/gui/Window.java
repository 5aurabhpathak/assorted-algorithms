/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package magic.pkgfor.english.gui;

import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.SwingWorker.StateValue.DONE;
import javax.swing.filechooser.FileNameExtensionFilter;
import magic.pkgfor.english.MAGIcForEnglish;

/**
 *
 * @author Saurabh
 */
public final class Window extends javax.swing.JFrame implements PropertyChangeListener {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInputParameters = new javax.swing.JPanel();
        jLabelPm = new javax.swing.JLabel();
        jLabelMaxGen = new javax.swing.JLabel();
        jLabelPopSize = new javax.swing.JLabel();
        jTextFieldFileName = new javax.swing.JTextField();
        jTextFieldPm = new javax.swing.JTextField();
        jTextFieldMaxGen = new javax.swing.JTextField();
        jTextFieldPopSize = new javax.swing.JTextField();
        jLabelFile = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sentenceDisplayArea = new javax.swing.JTextArea();
        runButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaPopulation = new javax.swing.JTextArea();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelPm1 = new javax.swing.JLabel();
        jLabelCg = new javax.swing.JLabel();
        jTextFieldCg = new javax.swing.JTextField();
        jLabelPopulation = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaStatus = new javax.swing.JTextArea();
        jLabelCg1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("English Grammar Inference");

        jPanelInputParameters.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabelPm.setText("Probability Of Mutation:");

        jLabelMaxGen.setText("Max  Generations:");

        jLabelPopSize.setText("Population Size:");

        jTextFieldFileName.setEditable(false);
        jTextFieldFileName.setAutoscrolls(false);

        jTextFieldPm.setEditable(false);

        jTextFieldMaxGen.setEditable(false);

        jTextFieldPopSize.setEditable(false);

        jLabelFile.setText("File:");

        javax.swing.GroupLayout jPanelInputParametersLayout = new javax.swing.GroupLayout(jPanelInputParameters);
        jPanelInputParameters.setLayout(jPanelInputParametersLayout);
        jPanelInputParametersLayout.setHorizontalGroup(
            jPanelInputParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInputParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputParametersLayout.createSequentialGroup()
                        .addComponent(jLabelPm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPm, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jLabelMaxGen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMaxGen, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jLabelPopSize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPopSize, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(74, Short.MAX_VALUE))
                    .addGroup(jPanelInputParametersLayout.createSequentialGroup()
                        .addComponent(jLabelFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFileName))))
        );
        jPanelInputParametersLayout.setVerticalGroup(
            jPanelInputParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInputParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInputParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPm)
                    .addComponent(jTextFieldPm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxGen)
                    .addComponent(jTextFieldMaxGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPopSize)
                    .addComponent(jTextFieldPopSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelInputParametersLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelMaxGen, jLabelPm, jLabelPopSize, jTextFieldMaxGen, jTextFieldPm, jTextFieldPopSize});

        sentenceDisplayArea.setEditable(false);
        sentenceDisplayArea.setColumns(20);
        sentenceDisplayArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        sentenceDisplayArea.setLineWrap(true);
        sentenceDisplayArea.setRows(5);
        sentenceDisplayArea.setWrapStyleWord(true);
        sentenceDisplayArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        sentenceDisplayArea.setEnabled(false);
        sentenceDisplayArea.setOpaque(false);
        jScrollPane5.setViewportView(sentenceDisplayArea);
        sentenceDisplayArea.getAccessibleContext().setAccessibleParent(null);

        runButton.setText("Run");
        runButton.setToolTipText("Run the inference algorithm!");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jTextAreaPopulation.setEditable(false);
        jTextAreaPopulation.setColumns(20);
        jTextAreaPopulation.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextAreaPopulation.setRows(5);
        jTextAreaPopulation.setAutoscrolls(false);
        jTextAreaPopulation.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaPopulation.setEnabled(false);
        jTextAreaPopulation.setOpaque(false);
        jScrollPane6.setViewportView(jTextAreaPopulation);

        jProgressBar.setOpaque(true);
        jProgressBar.setStringPainted(true);

        jLabelPm1.setText("Tagged File:");

        jLabelCg.setText("Current Generation:");

        jTextFieldCg.setEditable(false);

        jLabelPopulation.setText("Current Population:");

        jTextAreaStatus.setEditable(false);
        jTextAreaStatus.setColumns(20);
        jTextAreaStatus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextAreaStatus.setRows(2);
        jTextAreaStatus.setAutoscrolls(false);
        jTextAreaStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaStatus.setEnabled(false);
        jTextAreaStatus.setOpaque(false);
        jScrollPane7.setViewportView(jTextAreaStatus);

        jLabelCg1.setText("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelInputParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane5)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPm1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelCg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCg, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelCg1))
                            .addComponent(jLabelPopulation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelInputParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPm1)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCg)
                            .addComponent(jLabelCg1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPopulation))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jProgressBar, runButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        int maxGen, popSize;
        double pM;
        File inputFile;
        MAGIcForEnglish instance;
        JFileChooser jfc= new JFileChooser();
        jfc.setFileFilter(new FileNameExtensionFilter("Text File", "txt"));
        jfc.setAcceptAllFileFilterUsed(false);
        if(jfc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION)   {
            inputFile= jfc.getSelectedFile();
            maxGen= Integer.parseInt(JOptionPane.showInputDialog("Enter maxi"
                    + "mum number of generations the algorithm will run upto:", 10));
            popSize= Integer.parseInt(JOptionPane.showInputDialog("Enter pop"
                    + "ulation size to maintain:", 10));
            pM= Double.parseDouble(JOptionPane.showInputDialog("Enter the prob"
                    + "ability of muation of a grammar symbol:", 0.007));
            jTextFieldFileName.setText(inputFile.getAbsolutePath());
            jTextFieldPm.setText(String.valueOf(pM));
            jTextFieldPopSize.setText(String.valueOf(popSize));
            jTextFieldMaxGen.setText(String.valueOf(maxGen));
            jProgressBar.setValue(0);
            sentenceDisplayArea.setText(null);
            jTextAreaPopulation.setText(null);
            instance= new MAGIcForEnglish(inputFile, maxGen, popSize, pM);
            instance.addPropertyChangeListener(this);
            instance.execute();
            runButton.setEnabled(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Window().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCg;
    private javax.swing.JLabel jLabelCg1;
    private javax.swing.JLabel jLabelFile;
    private javax.swing.JLabel jLabelMaxGen;
    private javax.swing.JLabel jLabelPm;
    private javax.swing.JLabel jLabelPm1;
    private javax.swing.JLabel jLabelPopSize;
    private javax.swing.JLabel jLabelPopulation;
    private javax.swing.JPanel jPanelInputParameters;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextAreaPopulation;
    private javax.swing.JTextArea jTextAreaStatus;
    private javax.swing.JTextField jTextFieldCg;
    private javax.swing.JTextField jTextFieldFileName;
    private javax.swing.JTextField jTextFieldMaxGen;
    private javax.swing.JTextField jTextFieldPm;
    private javax.swing.JTextField jTextFieldPopSize;
    private javax.swing.JButton runButton;
    private javax.swing.JTextArea sentenceDisplayArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case "progress":
                jProgressBar.setValue((Integer) evt.getNewValue());
                break;
            case "tagged":
                sentenceDisplayArea.setText((String) evt.getNewValue());
                break;
            case "state":
                if(evt.getNewValue().equals(DONE))  {
                    jTextAreaPopulation.setText("Final Result:"
                            + "\n"+jTextAreaPopulation.getText()+"\nRun Completed!");
                    setCursor(Cursor.getDefaultCursor());
                    runButton.setEnabled(true);
                }
                break;
            case "currentgen":
                jTextFieldCg.setText(String.valueOf((Integer) evt.getNewValue()));
                break;
            case "currentpop":
                jTextAreaPopulation.setText((String) evt.getNewValue());
                break;
            case "status":
                jTextAreaStatus.setText((String) evt.getNewValue());
                break;
        }
            
    }

}